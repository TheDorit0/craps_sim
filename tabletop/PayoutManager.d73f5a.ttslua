

registeredPlayer = {
}

PlayerBetManager = {}

chipBankBagGUID = {
  [1] = '14ec8d',
  [5] = '68a5fd',
  [10] = 'b86727',
  [25] = 'cff43a',
  [100] = '3454fd',
  [500] = '722c6c',
  [1000] = '67049a',
  [100000] = '23c20b'
}

payoutBag = {Red = '0d754b',
                    White = '765aaf',
                    Pink = 'b36432',
                    Purple = 'a9e85a',
                    Green = '076330',
                    Blue = 'c1116b'
                  }

chipDenoms = {1,5,10,25,100,500,1000,100000}

maxAllowedLoops = 100 -- maximum number of while loop iterations

function onLoad()
  Global.setVar("PayoutManager", self)
  ply = getSeatedPlayers()
  for _,v in pairs(ply) do
    if (payoutBag[v] ~= nil) then
      getObjectFromGUID(payoutBag[v]).setDescription("Owner "..Player[v].steam_name)
    end
  end
  ref_buttonData = payoutBagDefaultButtonData
  createButtonsForPayoutBags ()
end

function onChat(message, player)
    if (message == 'pay me') then
      payment = 5426
      payPlayerByColor (player.color, payment)
    end
end

function onPlayerChangeColor(color)
    if(payoutBag[color] ~= nil) then
      registerPlayer(Player[color].steam_name, payoutBag[color] )
    end
end

function registerBetManager (p)
  --color -- the player color of the board.
  --guid -- the guid of the board.
  if(p.color and p.guid) then
  PlayerBetManager[p.color] = getObjectFromGUID(p.guid)
  print('Registerd bet manager for '..p.color)
  else
    print('PayoutManager: Could not register PlayerBetManager.  Missing color or guid.')
  end
end

function registerPlayer (playerSteamName, bagGUID)
  if (getObjectFromGUID(bagGUID) ~= nil and getObjectFromGUID(bagGUID).tag == "Bag") then
    registeredPlayer[playerSteamName] = bagGUID
  else
    print ('Could not register player.  Provided player bag could not be found.')
  end
end

function pay(p)
  local params = p
  local payout = params.payout
  local timer = 3
  if(params.timer) then
   timer = params.timer + 3
   params.timer = timer
 else
   params.timer = timer
  end
  if(payout) then
      v = payout[#payout]
      payout[#payout] = nil
      params.payout = payout
      if(params.steam_name ~= nil and v.amt ~= nil and v.amt > 0) then
        payPlayerBySteamName(params.steam_name, v.amt, v.denom)
        if (#payout > 0) then
        Wait.time(function () pay(params) end,timer)
      end
      elseif (params.color ~= nil and v.amt ~= nil and v.amt > 0) then
        payPlayerByColor (params.color, v.amt, v.denom)
        if (#payout > 0) then
        Wait.time(function () pay(params) end,timer)
        end
      end
  else
    if(params.steam_name ~= nil and params.amt ~= nil and params.amt > 0) then
      payPlayerBySteamName(params.steam_name, amt)
    elseif (params.color ~= nil and params.amt ~= nil and params.amt > 0) then
      payPlayerByColor (params.color, params.amt)
    end
  end
end

function payPlayerBySteamName (playerSteamName, amt, forceDenom)
  local bag = registeredPlayer[playerSteamName]
  if(bag) then
     Wait.time(function () payPlayerBag(getObjectFromGUID(bag), amt, forceDenom) end,0)
  else
    print ("Could not pay player.   Could not located registered pay location for steam name "..playerSteamName)
  end
end

function payPlayerByColor (playerColor, amt, forceDenom)
  local bag = payoutBag[playerColor]
  if(bag) then
    Wait.time(function () payPlayerBag(getObjectFromGUID(bag), amt, forceDenom) end,0)
  else
    print ("Could not pay player.   Could not locate pay location for color "..playerColor)
  end
end

function payPlayerBag (playerBag, amt, forceDenom)
  local payLoc = playerBag.getPosition()
  local yIncrement = 1
  local yValue = 5

  if (playerBag ~= nil and amt > 0) then
    denom = getNextDenom()
    remainingUnpaidAmt = math.floor(amt)
    loopCount1= 0
    local spawnedChips = {}
    if(forceDenom) then
      -- no need to sort out denominations.  Pay it all in forced denom.
        payCount = math.floor(remainingUnpaidAmt/forceDenom)
        remainingUnpaidAmt = remainingUnpaidAmt - (forceDenom*payCount)
        for i=1, payCount ,1 do
          table.insert(spawnedChips,getObjectFromGUID(chipBankBagGUID[forceDenom]).takeObject({
            position          = {payLoc.x, payLoc.y + yValue, payLoc.z},
            smooth            = false,
            callback_function = function (obj) lockSelf(obj) end
          }))
          yValue = yValue + yIncrement
        end
        if (payCount > 0) then
          Wait.Time(function () groupAndUnlockSpawnedChips (spawnedChips) end,2 )
        end
        if(remainingUnpaidAmt > 0) then
          payPlayerBag(playerBag,remainingUnpaidAmt) -- anything leftover, pay per normal logic
        end
    else
    -- not a forced denomination.  Determine what chips are needed to pay the players


    while (remainingUnpaidAmt > 0 and loopCount1 < maxAllowedLoops) do
      loopCount2= 0
      --print("Denom:"..denom)
      --print(remaining )
      while (remainingUnpaidAmt < denom and denom ~= 0 and loopCount2 < maxAllowedLoops) do
        --print("Denom:"..denom)
        --print ('Getting next denom from '..denom)
        denom = getNextDenom(denom)
        --print ('next denom is'..denom)
        loopCount2 = loopCount2 + 1
      end
      payCount = math.floor(remainingUnpaidAmt/denom)
      --log ('Pay count '..payCount..'in denom '..denom)
      remainingUnpaidAmt = remainingUnpaidAmt - (denom*payCount)
      for i=1, payCount ,1 do
        table.insert(spawnedChips,getObjectFromGUID(chipBankBagGUID[denom]).takeObject({
          position          = {payLoc.x, payLoc.y + yValue, payLoc.z},
          smooth            = false,
          callback_function = function (obj) lockSelf(obj) end
        }))
        yValue = yValue + yIncrement
      end
      loopCount1 = loopCount1 + 1
      if (payCount > 0) then
        Wait.Time(function () groupAndUnlockSpawnedChips (spawnedChips) end,2 )
      end
    end
    if (loopCount2 == maxAllowedLoops or loopCount1 == maxAllowedLoops) then
      print ('While loop timed out')
    end
    broadcastToAll("Paid player "..amt)
    end
    return true
  else
    print ('Unable to pay player by color.  Could not locate a payout bag for player or amount was zero: '..playerBag..':'..amt)
    return false
  end
end

function lockSelf(obj)
  obj.setLock(true)
end

function groupAndUnlockSpawnedChips (chips)
  local count = 0
  for _,v in pairs(chips) do
    v.setLock(false)
    count = count + 1
  end
  if (count > 1) then
    group(chips)
  end

end

function getNextDenom (denom)
  if denom == nil then
    for _,v in ipairs(chipDenoms) do
        newDenom = v
    end
  else
    newDenom = 0
    if (denom > 0) then
      for _,v in ipairs(chipDenoms) do
        if (v < denom) then
          newDenom = v
        end
      end
    end
  end
  return newDenom
end



function makeChange (changeParams)
  --pos - the destination position for the change chips. -or-
  --color - the player color to send the change chips to
  --chip - the chip/stack object to change.
  if(changeParams.chip.getQuantity() > 0) then
    --it's a stack
    currentDenom = changeParams.chip.value / changeParams.chip.getQuantity()
  else
    --it's a single chip
    --log(changeParams.chip.value,"Chip")
    currentDenom = changeParams.chip.value
  end
  --log(changeParams,'ChangeParams')
  changeValue = changeParams.chip.value
  local lowerDenom = nil
  newDenom = nil
  --log(chipDenoms,'ChipDenoms')
  for i,v in pairs(chipDenoms) do
    if (currentDenom == v) then
      newDenom = lowerDenom
      break
    else
      lowerDenom = v
    end
  end

  if (newDenom) then
    --we have a new denomination
  else
    newDenom = currentDenom
  end
  changeParams.chip.destruct()
  print('Changing '..changeValue..' in '..newDenom..'s for '..changeParams.color)
  if(changeParams.color) then
    payPlayerByColor (changeParams.color, changeValue, newDenom)
  end
end



-------------------------------scripting to manage the player payout bags.
defLocy = 2
buttonColorSelected = "Black"
activeColor = "Green"
spawnedButtonCount = 0
payoutBagDefaultButtonData = {
  readOnly = {
    {pos   = {0,defLocy,0},rot = {0,270,0}, height  = 500, width = 2000,size = 500, state = 1, name='Total', buttonNumber = 0, labelColor="Black", fontColor = "White"}
},
  take = {
    {pos   = {2,defLocy,-2},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take1k',chipName = "$1K",label="$1k", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,-1},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take500',chipName = "$500",label="$500", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,0},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take100',chipName = "$100",label="$100", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,1},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take25',chipName = "$25",label="$25", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,2},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take10',chipName = "$10",label="$10", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,3},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take5',chipName = "$5",label="$5", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor},
    {pos   = {2,defLocy,4},rot = {0,270,0}, height  = 500, width = 500,size = 200, state = 1, name='Take1',chipName = "$1",label="$1", buttonNumber = 0, labelColor="Black", fontColor = "White", activeColor = activeColor}
  }}
bagButtons = {}

function createButtonsForPayoutBags ()
  for color,v in pairs(payoutBag) do
    local bag = getObjectFromGUID(v)
    createReadOnlyButtons(bag)
    createTakeButtons(bag,color)
  end
end

function none()
  --do nothing
end

function takeDenom (takeParams)
  --chipName - the name as it displays on the chip, such as $1K or $5
  --qty - how many to take (up to amount in the bag)
  --bag - where to take them from
  --color - player color
  takeObjects = {}
  local totalCount = 0 -- to total count of chip/stack objects of this denom in the bag
  --log(takeParams.bag.getObjects(),'PayoutManager -- takeDenom -- bag objects')
  if (takeParams.bag.getObjects()) then
    for _,v in pairs(takeParams.bag.getObjects()) do
      if(v.name == takeParams.chipName) then
        --log(v,'PayoutManager -- takeDenom -- bag object')
        takeObjects[v.guid..totalCount] = v --guids apparently aren't unique for bag objects? so had to make this more unique
        totalCount = totalCount + 1

      end
    end
    if totalCount <= takeParams.qty then
      -- taking these chips will bring the qty to zero in the bag for this denom.
      for i,w in pairs(bagButtons[takeParams.bag.guid].buttons) do
        if w.chipName == takeParams.chipName then
          -- set the take button for this denom to its empty color
          takeParams.bag.editButton({index = i, color = w.labelColor})
        end
      end
    end
    local yval = 16.87 -- how high above the table to start spawning the chips
    local qtyCount = 1 -- how many chips we have taken from the bag so far
    qtys = {} -- table with index numbers as values for each chip removed
              -- we pass this instead of qtyCount to the callback function because after the 1 second wait, qtyCount would just send its max value for all the callbacks

    for c_guid,v in pairs(takeObjects) do

      if (qtyCount > takeParams.qty) then
        break
      else
        -- spawn a chip and increment the qty spawned and the position yval of the next chip (avoids premature grouping)
        qtys[c_guid] = qtyCount
        takeParams.bag.takeObject({
          position          = {50.79,yval,-41.93},
          callback_function = function (obj) obj.setLock(true) Wait.time(function () moveSpawnedChipToPlayerBoard(obj,takeParams.color,qtys[c_guid]) end,0) end,
          smooth            = false,
          guid              = v.guid
        })

        yval = yval + 1
        qtyCount = qtyCount + 1
      end
    end
  end
end

function moveSpawnedChipToPlayerBoard (theChip,pcolor,qty)
  --the qty number is used to adjust the position yval
  local playerBoardPos = PlayerBetManager[pcolor].call('getBetZone').getPosition()
  theChip.setLock(false)
  theChip.setPosition({playerBoardPos.x,playerBoardPos.y + qty,playerBoardPos.z})
end

function createReadOnlyButtons(obj)
  local thisObjButtons = {}
  if (bagButtons[obj.guid] == nil) then
    bagButtons[obj.guid] = {spawnedButtonCount = 0, buttons = {}}
  end
    for i, data in ipairs(ref_buttonData.readOnly) do
        --Sets up reference function
        local buttonNumber = spawnedButtonCount
        local funcName = obj.guid.."readOnly"..i
        self.setVar(funcName, function() end)
        --Sets up label
        local label = ""
        obj.createButton({
            label=label, click_function=funcName, function_owner=self,
            position=data.pos, height=data.height, width=data.width,
            font_size=data.size,
            --scale=buttonScale,
            press_color = buttonColorSelected,
            color=data.labelColor, font_color=data.fontColor,
            rotation = data.rot
        })
        bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount] = data
        bagButtons[obj.guid].spawnedButtonCount = bagButtons[obj.guid].spawnedButtonCount + 1

        --bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount].buttonNumber = bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount]
      end
end

function createTakeButtons(obj,pcolor)
  local thisObjButtons = {}
  if (bagButtons[obj.guid] == nil) then
    bagButtons[obj.guid] = {spawnedButtonCount = 0, buttons = {}}
  end
    for i, data in ipairs(ref_buttonData.take) do
        --Sets up reference function
        local buttonNumber = spawnedButtonCount
        local funcName = obj.guid.."take"..i
        self.setVar(funcName, function() takeDenom({chipName = data.chipName, qty = 10, bag = obj, color=pcolor}) end)

        obj.createButton({
            label=data.label, click_function=funcName, function_owner=self,
            position=data.pos, height=data.height, width=data.width,
            font_size=data.size,
            --scale=buttonScale,
            press_color = buttonColorSelected,
            color=data.labelColor, font_color=data.fontColor,
            rotation = data.rot
        })
        bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount] = data
        bagButtons[obj.guid].spawnedButtonCount = bagButtons[obj.guid].spawnedButtonCount + 1

        --bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount].buttonNumber = bagButtons[obj.guid].buttons[bagButtons[obj.guid].spawnedButtonCount]
      end
end

function onObjectEnterContainer(bag, obj)

  for _,v in pairs(payoutBag) do
    if (bag.guid == v and obj.tag == "Chip") then
      local total = 0
      targetBag = getObjectFromGUID(v)
      --print("Update total for "..targetBag.getName()..'-'..targetBag.getDescription())

      if targetBag.getVar('total') == nil then
        total = 0
      else
        total = targetBag.getVar('total')
        --print('found prev total was '..total)
      end
      total = total + obj.value
      --print('Adding '..obj.value..'for new total of '..total)
      targetBag.setVar('total',total)
      --log(bagButtons[v].buttons,'Bag Buttons of this guid')
      for i,w in pairs(bagButtons[v].buttons) do
        --log(w,'row object values')
        if w.name == 'Total' then
          --log(targetBag.getButtons(),'Target bag buttons')
          targetBag.editButton({index = i, label = abb(total)})
        end
        if w.chipName == obj.getName() then
          targetBag.editButton({index = i, color = w.activeColor})
        end
      end
      -- light up the take button for this denomination
      activateTakeButton(targetBag,obj.getName())
    end
  end
end

function activateTakeButton(payoutBag, buttonName)

end

function onObjectLeaveContainer(bag, obj)
--  if (bag.guid == thebag.guid) then
    --Wait.condition(function () leave_callback(obj) end , function () return not obj.spawning end)
  --end
  for _,v in pairs(payoutBag) do
    if (bag.guid == v) then
      targetBag = getObjectFromGUID(v)
      Wait.condition(function () leave_callback(obj,targetBag) end , function () return not obj.spawning end,
                    10,
                    function() print('PayoutManager Timed out waiting for a chip to leave a PayoutBag') end)
    end
  end

end

function leave_callback (obj, bag)
  if (obj.tag == 'Chip') then


  local total = 0
  if bag.getVar('total') == nil then
    total = 0
  else
    total = bag.getVar('total')
  end
  total = total - obj.value
  bag.setVar('total',total)
  for i,w in pairs(bagButtons[bag.guid].buttons) do
    --log(w,'row object values')
    if w.name == 'Total' then
      --log(targetBag.getButtons(),'Target bag buttons')
      bag.editButton({index = i, label = abb(total)})
    end
  end

    end
end

function abb(num)
  n = tonumber(num)
    if n>=1*10^4 and n<1*10^6 then
        n=(n/1*10^-3)
        return string.sub(tostring(n),1,5).."k"
    elseif n>=1*10^6 and n<1*10^7 then
        n=(n/1*10^-6)
        return string.sub(tostring(n),1,3).."M"
    elseif n>=1*10^7 and n<1*10^8 then
        n=(n/1*10^-7)
        return string.sub(tostring(n),1,3).."B"
    elseif n>=1*10^8 and n<1*10^9 then
        n=(n/1*10^-8)
        return string.sub(tostring(n),1,3).."T"
    else
        return n
    end
end
